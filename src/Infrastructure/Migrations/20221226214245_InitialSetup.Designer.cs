// <auto-generated />
using System;
using BookmakerService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookmakerService.Infrastructure.Migrations
{
    [DbContext(typeof(BookmakerServiceDBContext))]
    [Migration("20221226214245_InitialSetup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookmakerService.Domain.AggregateModels.Bookmaker.Bookmaker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("Bookmaker", (string)null);
                });

            modelBuilder.Entity("BookmakerService.Domain.AggregateModels.Team.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("BookmakerService.Domain.AggregateModels.Team.TeamAcronym", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModificationDate")
                        .IsConcurrencyToken()
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UUId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UUId")
                        .IsUnique();

                    b.ToTable("TeamAcronym", (string)null);
                });

            modelBuilder.Entity("BookmakerService.Domain.AggregateModels.Team.TeamAcronym", b =>
                {
                    b.HasOne("BookmakerService.Domain.AggregateModels.Team.Team", null)
                        .WithMany("Acronyms")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("BookmakerService.Domain.AggregateModels.Team.Team", b =>
                {
                    b.Navigation("Acronyms");
                });
#pragma warning restore 612, 618
        }
    }
}
